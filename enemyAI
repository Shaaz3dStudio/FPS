using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class EnemyAi : MonoBehaviour
{
    public NavMeshAgent navAgent;
    public enum EnemyState { Idle, Chase, Attack, Dead };
    public EnemyState currentState = EnemyState.Idle;
    public Transform player;
    public float chaseDistance = 10f;
    public float attackDistance = 2f;
    public float attackCooldown = 2f;
    public float attackDelay = 1.5f;
    public int damage = 10;
    public int health = 100;
    private bool isAttacking;
    private float lastAttackTime;

    public GameObject bloodScreenEffect;
    private GameObject instantiatedObject;

    private CapsuleCollider capsuleCollider;

    [SerializeField] private float timer = 5;
    public float bulletTime;
    public GameObject enemyBullet;
    public Transform spawnPoint;
    public float enemySpeed;

    private void Start()
    {
        capsuleCollider = GetComponent<CapsuleCollider>();
        navAgent = GetComponent<NavMeshAgent>();
        lastAttackTime = -attackCooldown;
    }

    private void Update()
    {
        switch (currentState)
        {
            case EnemyState.Idle:
                //animation
                if(Vector3.Distance(transform.position, player.position)<=chaseDistance)
                {
                    currentState = EnemyState.Chase;
                }
                break;
            case EnemyState.Chase:
                //animation
                navAgent.SetDestination(player.position);
                if (Vector3.Distance(transform.position, player.position) <= attackDistance)
                {
                    currentState = EnemyState.Attack;
                }
                break;
            case EnemyState.Attack:
                //animation
                navAgent.SetDestination(transform.position);
                if (!isAttacking && Time.time - lastAttackTime >= attackCooldown)
                {
                    StartCoroutine(AttackWithDelay());
                    Debug.Log("Attack Player");
                    //blood screen effect
                    StartCoroutine(ActivateBloodScreenEffect());
                }
                if (Vector3.Distance(transform.position, player.position) > attackDistance)
                    currentState = EnemyState.Chase;
                break;
            case EnemyState.Dead:
                //animation
                navAgent.enabled = false;
                capsuleCollider.enabled = false;
                enabled = false;
                //increase score
                Debug.Log("Enemy Dead");
                break;
        }
    }

    void ShootAtPlayer()
    {
        bulletTime -= Time.deltaTime;
        if (bulletTime > 0)
           return;
        bulletTime = timer;
        GameObject bulletObj = Instantiate(enemyBullet, spawnPoint.transform.position, spawnPoint.transform.rotation) as GameObject;
        Rigidbody bulletRig = bulletObj.GetComponent<Rigidbody>();
        bulletRig.AddForce(bulletRig.transform.forward * enemySpeed);
        Destroy(bulletObj, 0.1f);
     }

    private IEnumerator AttackWithDelay()
    {
        isAttacking = true;

        //damage the player
        Player playerMovement = player.GetComponent<Player>();
        if (playerMovement != null)
        {
           playerMovement.TakeDamage(damage);
        }

        yield return new WaitForSeconds(attackDelay);
        isAttacking=false;
        lastAttackTime = Time.time;
    }

    private IEnumerator ActivateBloodScreenEffect()
    {
        InstantiateObject();
        yield return new WaitForSeconds(attackDelay);
        DeleteObject();
    }

    public void TakeDamage(int damageAmount)
    {
        if (currentState == EnemyState.Dead)
            return;

        health -= damageAmount;

        if (health <= 0)
        {
            health = 0;
            Die();

        }
    }

    private void Die()
    {
        //deathscreen
        currentState = EnemyState.Dead;
    }
    void InstantiateObject()
    {
        instantiatedObject = Instantiate(bloodScreenEffect);
    }
    void DeleteObject()
    {
        if (instantiatedObject != null)
        {
            Destroy(instantiatedObject);
            instantiatedObject = null;
        }
    }
}

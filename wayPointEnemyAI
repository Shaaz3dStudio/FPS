using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class WayPointEnemyAI : MonoBehaviour
{
    public NavMeshAgent navAgent;
    public Animator animator;
    public Renderer targetRenderer;
    public Material roboMat;
    public enum EnemyState { Walk, Chase, Attack, Dead };
    public EnemyState currentState = EnemyState.Walk;
    public Transform player;
    public float chaseDistance = 20f;
    public float attackDistance = 10f;
    public float attackCooldown = 2f;
    public float attackDelay = 1.5f;
    public int damage = 10;
    public int health = 100;
    private bool isAttacking;
    private bool isMoving = false;
    private float lastAttackTime;

    public GameObject bloodScreenEffect;
    private GameObject instantiatedObject;

    private CapsuleCollider capsuleCollider;

    //[SerializeField] private float timer = 5;
    //public float laserTime;
    //public GameObject enemyLaser;
    //public Transform spawnPoint;
    //public float enemySpeed;

    private void Start()
    {
        capsuleCollider = GetComponent<CapsuleCollider>();
        navAgent = GetComponent<NavMeshAgent>();
        lastAttackTime = -attackCooldown;
        animator = GetComponent<Animator>();
        //roboMat=GetComponent<WayPointEnemyAI>().roboMat;
    }

    private void Update()
    {
        switch (currentState)
        {
            case EnemyState.Walk:
                animator.SetBool("IsChasing", false);
                animator.SetBool("IsAttacking", false);
                if (!isMoving || navAgent.remainingDistance < 0.1f)
                {
                    //Enemy Patrol
                    Walk();
                }
                if (IsPlayerInRange(chaseDistance))
                    currentState = EnemyState.Chase;
                break;

            case EnemyState.Chase:
                animator.SetBool("IsChasing", true);
                animator.SetBool("IsAttacking", false);
                //ChasePlayer
                ChasePlayer();
                if(IsPlayerInRange(attackDistance))
                    currentState = EnemyState.Attack;
                break;

            case EnemyState.Attack:
                animator.SetBool("IsChasing", false);
                animator.SetBool("IsAttacking", true);
                //AttackPlayer
                AttackPlayer();
                if (!IsPlayerInRange(attackDistance))
                    currentState = EnemyState.Chase;
                break;

            case EnemyState.Dead:
                animator.SetBool("IsChasing", false);
                animator.SetBool("IsAttacking", false);
                animator.SetBool("IsDead", true);
                navAgent.enabled = false;
                capsuleCollider.enabled = false;
                enabled = false;
                //Material mat = targetRenderer.material;
                //mat.DisableKeyword("Emission");
                //mat.SetColor("EmissionColor", Color.black);
                //roboMat.DisableKeyword("Emission");
                //roboMat.SetColor("EmissionColor", Color.black);
                //increase score
                Debug.Log("Enemy Dead");
                break;
        }
    }

    private bool IsPlayerInRange(float range)
    {
        return Vector3.Distance(transform.position, player.position) <= range;
    }

    private void Walk()
    {
        navAgent.speed = 2f;
        Vector3 randomPosition = RandomNavMeshPosition();
        navAgent.SetDestination(randomPosition);
        isMoving = true;
    }
    private Vector3 RandomNavMeshPosition()
    {
        Vector3 randomDirection = Random.insideUnitSphere * 10f;
        randomDirection += transform.position;
        NavMeshHit hit;
        NavMesh.SamplePosition(randomDirection, out hit, 10f, NavMesh.AllAreas);
        return hit.position;
    }

    private void ChasePlayer()
    {
        navAgent.speed = 4f;
        //chase animation
        navAgent.SetDestination(player.position);
    }

    private void AttackPlayer()
    {
        //attack animation
        navAgent.SetDestination(transform.position);
        if (!isAttacking && Time.time - lastAttackTime >= attackCooldown)
        {
            StartCoroutine(AttackWithDelay());
            StartCoroutine(ActivateBloodScreenEffect());
            //ShootAtPlayer();
            lastAttackTime = Time.time;

            Player playerMovement = player.GetComponent<Player>();
            if (playerMovement != null)
            {
                playerMovement.TakeDamage(damage);
            }
        }
    }

    //}

    private IEnumerator AttackWithDelay()
    {
        isAttacking = true;
        yield return new WaitForSeconds(attackDelay);
        isAttacking = false;
    }
    private IEnumerator ActivateBloodScreenEffect()
    {
        InstantiateObject();
        yield return new WaitForSeconds(attackDelay);
        DeleteObject();
    }

    public void TakeDamage(int damageAmount)
    {
        if (currentState == EnemyState.Dead)
            return;

        health -= damageAmount;

        if (health <= 0)
        {
            health = 0;
            Die();

        }
    }

    private void Die()
    {
        //deathscreen
        currentState = EnemyState.Dead;
    }
    void InstantiateObject()
    {
        instantiatedObject = Instantiate(bloodScreenEffect);
    }
    void DeleteObject()
    {
        if (instantiatedObject != null)
        {
            Destroy(instantiatedObject);
            instantiatedObject = null;
        }
    }
}
